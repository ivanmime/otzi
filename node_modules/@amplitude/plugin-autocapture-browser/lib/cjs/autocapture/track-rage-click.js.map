{"version":3,"file":"track-rage-click.js","sourceRoot":"","sources":["../../../src/autocapture/track-rage-click.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllWindowObservables } from 'src/autocapture-plugin';\nimport { filter, map } from 'rxjs';\nimport { BrowserClient } from '@amplitude/analytics-core';\nimport { filterOutNonTrackableEvents, shouldTrackEvent } from '../helpers';\nimport { AMPLITUDE_ELEMENT_RAGE_CLICKED_EVENT } from '../constants';\nimport { DEFAULT_RAGE_CLICK_THRESHOLD, DEFAULT_RAGE_CLICK_WINDOW_MS } from '@amplitude/analytics-core';\n\nconst RAGE_CLICK_THRESHOLD = DEFAULT_RAGE_CLICK_THRESHOLD;\nconst RAGE_CLICK_WINDOW_MS = DEFAULT_RAGE_CLICK_WINDOW_MS;\n\ntype Click = {\n  X: number;\n  Y: number;\n  Time: number;\n};\n\ntype EventRageClick = {\n  '[Amplitude] Begin Time': string; // ISO-8601\n  '[Amplitude] End Time': string; // ISO-8601\n  '[Amplitude] Duration': number;\n  '[Amplitude] Clicks': Array<Click>;\n  '[Amplitude] Click Count': number;\n};\n\ntype ClickEvent = {\n  event: MouseEvent | Event;\n  timestamp: number;\n  targetElementProperties: Record<string, any>;\n  closestTrackedAncestor: Element | null;\n};\n\nexport function trackRageClicks({\n  amplitude,\n  allObservables,\n  shouldTrackRageClick,\n}: {\n  amplitude: BrowserClient;\n  allObservables: AllWindowObservables;\n  shouldTrackRageClick: shouldTrackEvent;\n}) {\n  const { clickObservable } = allObservables;\n\n  // Keep track of all clicks within the sliding window\n  const clickWindow: ClickEvent[] = [];\n\n  return clickObservable\n    .pipe(\n      filter(filterOutNonTrackableEvents),\n      filter((click) => {\n        return shouldTrackRageClick('click', click.closestTrackedAncestor);\n      }),\n      map((click) => {\n        const now = click.timestamp;\n\n        // if the current click isn't on the same element as the most recent click,\n        // clear the sliding window and start over\n        if (\n          clickWindow.length > 0 &&\n          clickWindow[clickWindow.length - 1].closestTrackedAncestor !== click.closestTrackedAncestor\n        ) {\n          clickWindow.splice(0, clickWindow.length);\n        }\n\n        // remove past clicks that are outside the sliding window\n        let clickPtr = 0;\n        for (; clickPtr < clickWindow.length; clickPtr++) {\n          if (now - clickWindow[clickPtr].timestamp < RAGE_CLICK_WINDOW_MS) {\n            break;\n          }\n        }\n        clickWindow.splice(0, clickPtr);\n\n        // add the current click to the window\n        clickWindow.push(click);\n\n        // if there's not enough clicks to be a rage click, return null\n        if (clickWindow.length < RAGE_CLICK_THRESHOLD) {\n          return null;\n        }\n\n        // if we've made it here, we have enough trailing clicks on the same element\n        // for it to be a rage click\n        const firstClick = clickWindow[0];\n        const lastClick = clickWindow[clickWindow.length - 1];\n\n        const rageClickEvent: EventRageClick = {\n          '[Amplitude] Begin Time': new Date(firstClick.timestamp).toISOString(),\n          '[Amplitude] End Time': new Date(lastClick.timestamp).toISOString(),\n          '[Amplitude] Duration': lastClick.timestamp - firstClick.timestamp,\n          '[Amplitude] Clicks': clickWindow.map((click) => ({\n            X: (click.event as MouseEvent).clientX,\n            Y: (click.event as MouseEvent).clientY,\n            Time: click.timestamp,\n          })),\n          '[Amplitude] Click Count': clickWindow.length,\n          ...firstClick.targetElementProperties,\n        };\n\n        // restart the sliding window\n        clickWindow.splice(0, clickWindow.length);\n\n        return { rageClickEvent, time: firstClick.timestamp };\n      }),\n      filter((result) => result !== null),\n    )\n    .subscribe((data: { rageClickEvent: EventRageClick; time: number } | null) => {\n      /* istanbul ignore if */\n      if (data === null) {\n        return;\n      }\n      amplitude.track(AMPLITUDE_ELEMENT_RAGE_CLICKED_EVENT, data.rageClickEvent, { time: data.time });\n    });\n}\n"]}