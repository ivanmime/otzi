{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../../src/pageActions/actions.ts"],"names":[],"mappings":";;;AAGA,iBAAiB;AACjB;;;;;GAKG;AACI,IAAM,aAAa,GAAG,UAAC,UAAsB,EAAE,cAA2B;IAC/E,6CAA6C;IAC7C,IAAI,UAAU,CAAC,UAAU,KAAK,aAAa,EAAE;QAC3C,4HAA4H;QAC5H,IAAI,cAAc,GAAuB,QAAQ,CAAC,eAAe,CAAC;QAClE,IAAI,UAAU,CAAC,KAAK,IAAI,cAAc,EAAE;YACtC,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SAC3D;QAED,kEAAkE;QAClE,IAAI,cAAc,IAAI,UAAU,CAAC,QAAQ,EAAE;YACzC,OAAO,cAAc,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;SAC1D;QAED,qDAAqD;QACrD,OAAO,cAAc,CAAC;KACvB;IAED,oDAAoD;IACpD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AApBW,QAAA,aAAa,iBAoBxB;AAEF,qBAAqB;AACd,IAAM,yBAAyB,GAAG,UAAC,UAAsB,EAAE,cAA2B;IAC3F,2BAA2B;IAC3B,IAAI,UAAU,CAAC,UAAU,KAAK,aAAa,EAAE;QAC3C,IAAM,aAAa,GAAG,IAAA,qBAAa,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QAChE,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,SAAS,CAAC;SAClB;QAED,IAAI,UAAU,CAAC,kBAAkB,KAAK,MAAM,EAAE;YAC5C,OAAO,aAAa,CAAC,WAAW,CAAC;SAClC;aAAM,IAAI,UAAU,CAAC,kBAAkB,KAAK,WAAW,IAAI,UAAU,CAAC,SAAS,EAAE;YAChF,OAAO,aAAa,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;SACzD;QACD,OAAO,SAAS,CAAC;KAClB;IAED,wCAAwC;IACxC,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAlBW,QAAA,yBAAyB,6BAkBpC;AAEF,qFAAqF;AAC9E,IAAM,cAAc,GAAG,UAC5B,OAAgC,EAChC,EAAmD;IAEnD,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;QACrB,4DAA4D;QAC5D,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,OAAO;SACR;QAED,IAAI,MAAM,CAAC,UAAU,KAAK,uBAAuB,EAAE;YACjD,IAAM,IAAI,GAAG,IAAA,iCAAyB,EAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,sBAAqC,CAAC,CAAC;YAEpG,uBAAuB;YACvB,EAAE,CAAC,uBAAuB,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;SAC1D;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAjBW,QAAA,cAAc,kBAiBzB","sourcesContent":["import type { DataSource, PageAction } from '@amplitude/analytics-core/lib/esm/types/element-interactions';\nimport { ElementBasedTimestampedEvent, ElementBasedEvent } from 'src/helpers';\n\n// Get DataSource\n/**\n * Gets the DOM element specified by the data source configuration\n * @param dataSource - Configuration for finding the target element\n * @param contextElement - The element to start searching from\n * @returns The matching DOM element or undefined if not found\n */\nexport const getDataSource = (dataSource: DataSource, contextElement: HTMLElement) => {\n  // Only process DOM_ELEMENT type data sources\n  if (dataSource.sourceType === 'DOM_ELEMENT') {\n    // If scope is specified, find the closest ancestor matching the scope rather than using documentElement (html) as the scope\n    let scopingElement: HTMLElement | null = document.documentElement;\n    if (dataSource.scope && contextElement) {\n      scopingElement = contextElement.closest(dataSource.scope);\n    }\n\n    // If we have both a scope and selector, find the matching element\n    if (scopingElement && dataSource.selector) {\n      return scopingElement.querySelector(dataSource.selector);\n    }\n\n    // Return scopingElement if no selector was specified\n    return scopingElement;\n  }\n\n  // Return undefined for non-DOM_ELEMENT data sources\n  return undefined;\n};\n\n// extract DataSource\nexport const extractDataFromDataSource = (dataSource: DataSource, contextElement: HTMLElement) => {\n  // Extract from DOM Element\n  if (dataSource.sourceType === 'DOM_ELEMENT') {\n    const sourceElement = getDataSource(dataSource, contextElement);\n    if (!sourceElement) {\n      return undefined;\n    }\n\n    if (dataSource.elementExtractType === 'TEXT') {\n      return sourceElement.textContent;\n    } else if (dataSource.elementExtractType === 'ATTRIBUTE' && dataSource.attribute) {\n      return sourceElement.getAttribute(dataSource.attribute);\n    }\n    return undefined;\n  }\n\n  // TODO: Extract from other source types\n  return undefined;\n};\n\n// Execute actions for a condition and attach event properties to the event if needed\nexport const executeActions = (\n  actions: (string | PageAction)[],\n  ev: ElementBasedTimestampedEvent<ElementBasedEvent>,\n) => {\n  actions.forEach((action) => {\n    // Skip if actions is string until action set is implemented\n    if (typeof action === 'string') {\n      return;\n    }\n\n    if (action.actionType === 'ATTACH_EVENT_PROPERTY') {\n      const data = extractDataFromDataSource(action.dataSource, ev.closestTrackedAncestor as HTMLElement);\n\n      // Attach data to event\n      ev.targetElementProperties[action.destinationKey] = data;\n    }\n  });\n};\n"]}